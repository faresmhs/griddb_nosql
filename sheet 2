public class LinkedListNode {
    int value ;
    LinkedListNode next ;
    LinkedListNode head = null ;

    public int getValue() {
        return value ;
    }
    public LinkedListNode getNext() {
        return next ;
    }
}
public class MySpecialLinkedListUtils {
    public static double[] summary(LinkedListNode head){
        double sum =0 ;
        LinkedListNode i = head;
        while (i != null){
            sum += i.value;
            i=i.next;
        }
        int size = 0 ;
        i=head;
        while(i != null){
            size++ ;
            i = i.next ;
        }
        double avarage = sum/size ;
        double midian=0;
        LinkedListNode h = new LinkedListNode();
        i= insertionSort(head);
        int counter = 0;
        while (counter != size/2){
            i=i.next;
            counter++;
            if (counter == (size/2)-1){
                h = i ;
            }
        }
        if (size%2==0){
            midian = (double)i.value;
        }
        else{
            midian = (((double)i.value + (double)h.value) / 2);
        }
        double max =0 ;
        i=head;
        while (i!=null){
            if (i.value > max){
                max = i.value;
            }
            i = i.next;
        }
        double min = 0 ;
        i=head;
        while (i!=null){
            if (i.value < min){
                min = i.value;
            }
            i = i.next;
        }
    }
    public static LinkedListNode reverse(LinkedListNode head){
        LinkedListNode current = head ;
        LinkedListNode next = null ;
        LinkedListNode previous = null ;
        while(current!= null){
            next = current ;
            current = current.next ;
            next.next = previous ;
            previous = next ;
            head = next ;
        }
    }
    public static LinkedListNode evenIndexElements(LinkedListNode head){
        LinkedListNode node = head ;
        int k=0;
        while (node!=null){
            k++;
            node=node.next;
        }
        node = head ;
        int[] s = new int[k];
        int cout=0;
        for(int i=0;i<k;i++){
            if (i%2==0){
                s[cout++]=node.value;
            }
            node = node.next;
        }
        node = head ;
        for (int i=0 ; i<cout ; i++){
            node.value = s[i];
            node = node.next;
        }
    }
    public static insertionSort(LinkedListNode head){
        LinkedListNode h = head ;
        int k=0;
        while (h!=null){
            k++;
            h=h.next;
        }
        h = head ;
        int[] d = new int[k];
        int count =0 ;
        for (int i=0;i<k;i++){
            d[count++]= h.value;
            h = h.next;
        }
        int t,j;
        for (int i=0 ; i<count;i++){
            t = d[i];
            for (j=i;j>0&& t<d[j-1];j--){
                d[j]=d[j-1];
            }
            d[j]= t ;
        }
        h= head;
        for (int i=0; i<count ; i++){
            if (i==count-1){
                h.next = null;
                break;
            }
            h.value = d[i];
            h=h.next;
        }
    }
    public static LinkedListNode mergeSort(LinkedListNode head){
        LinkedListNode w = head ;
        int k=0;
        while (w!=null){
            k++;
            w=w.next;
        }
        w = head ;
        int[] q = new int[k];
        for (int i=0;i<k;i++){
            q[i]= w.value;
            w = w.next;
        }
        sort(q,0,q.length-1);
        w= head;
        for (int i=0;i<k;i++){
            if (i==k-1){
                w.next = null;
            }
            w.value = q[i];
            w=w.next;
        }
        public static void merge(int arr[],int low ,int mid , int high){
            int i,r,k,l;
            int[]temp = new int[high];
            l=low;
            r=mid+1;
            i=low;
            while (l<=mid&&r<=high){
                if (arr[l]<=arr[r]){
                    temp[i]=arr[l];
                    l++;
                }
                else{
                    temp[i]=arr[r];
                    r++;
                }
                i++;
            }
            if (l>mid){
                for (k=r;k<=high;k++){
                    temp[i]=arr[k];
                    i++;
                }
            }
            else{
                for (k=l;k<=mid;k++){
                    temp[i]=arr[k];
                    i++
                }
            }
            for (k=low;k<=high;k++){
                arr[k]=temp[k];
            }
        }
        public static void sort(int arr[],int low , int high ){
           if (low<high){
               int n = (high + low)/2;
               sort(arr,low,n);
               sort(arr,n+1,high);
               merge(arr,low,n,high);
           }
        }
    }
    public static void removeCentralNode(LinkedListNode head){
        LinkedListNode p = head ;
        int k=0;
        while (p!=null){
            k++;
            p=p.next;
        }
        int counter =0 ;
        p=head;
        if (k%2==1){
            while(counter<k/2-1){
                p=p.next
            }
            p.next=p.next.next;
        }
        else {
            while (counter < ((k-1)/2)-1){
                p=p.next;
            }
            p.next=p.next.next;
        }
    }
    public static boolean palindrome(LinkedListNode head){
        LinkedListNode node = head ;
        int h=0,j;
        while (node!=null){
            h++;
            node=node.next;
        }
        node = head ;
        int[] a = new int[h];
        for (int i=0;i<h;i++){
            a[i]=node.value;
            node=node.next;
        }
        for (int i =0,j=h-1;i<h&&j>0&&i!=j;i++,j--){
            if (a[i]==a[j]){
                continue;
            }
            else {
                return false ;
            }
        }
        return true;
    }
}
